const xPositions = ["left", "right"], yPositions = ["top", "bottom"], nm = "scrpt", chatWidth = "400px", domain = "http://http://164.90.239.9/:8000"; class Scrpt { loadInterval; constructor({ position: t = "bottom-right", appName: n = "" } = {}) { if (this.position = this.getPosition(t), this.open = !1, this.inputText = "", this.appName = n, !t.includes("-")) throw new Error("position must include - symbol. for example bottom-right"); if (!yPositions.includes(t.split("-")[0])) throw new Error("y position must be top or bottom"); if (!xPositions.includes(t.split("-")[1])) throw new Error("x position must be left or right"); if ("" === n) throw new Error("invalid app name"); this.getChatInitialData(n).then((t => { this.initialize() })), this.createStyles() } detectMob() { return [/Android/i, /webOS/i, /iPhone/i, /iPad/i, /iPod/i, /BlackBerry/i, /Windows Phone/i].some((t => navigator.userAgent.match(t))) } getPosition(t) { const [n, e] = t.split("-"); return { [n]: "40px", [e]: "40px" } } initialize() { const t = document.createElement("div"); t.style.position = "fixed", t.style.zIndex = "9999", Object.keys(this.position).forEach((n => t.style[n] = this.position[n])), document.body.appendChild(t); const n = document.createElement("div"); n.classList.add(`${nm}-button-container`); const e = document.createElement("span"); e.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="45" height="45" fill="currentColor" class="bi bi-chat-dots" viewBox="0 0 16 16">\n        <path d="M5 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>\n        <path d="m2.165 15.803.02-.004c1.83-.363 2.948-.842 3.468-1.105A9.06 9.06 0 0 0 8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6a10.437 10.437 0 0 1-.524 2.318l-.003.011a10.722 10.722 0 0 1-.244.637c-.079.186.074.394.273.362a21.673 21.673 0 0 0 .693-.125zm.8-3.108a1 1 0 0 0-.287-.801C1.618 10.83 1 9.468 1 8c0-3.192 3.004-6 7-6s7 2.808 7 6c0 3.193-3.004 6-7 6a8.06 8.06 0 0 1-2.088-.272 1 1 0 0 0-.711.074c-.387.196-1.24.57-2.634.893a10.97 10.97 0 0 0 .398-2z"/>\n        </svg>', e.classList.add(`${nm}-icon`), this.chatIcon = e; const i = document.createElement("span"); i.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="45" height="45" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">\n        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>\n      </svg>', i.classList.add(`${nm}-icon`, `${nm}-hidden`), this.closeIcon = i, this.chatContainer = document.createElement("div"), this.chatContainer.classList.add(`${nm}-hidden`, `${nm}-chat-container`), this.chatContainer.style.width = this.detectMob() ? window.innerWidth - 5 + "px" : "400px", this.chatContainer.style.bottom = this.detectMob() ? "0px" : "75px", this.createChatContainerContent(), n.appendChild(this.chatIcon), n.appendChild(this.closeIcon), n.addEventListener("click", this.toggleOpen.bind(this)), t.appendChild(this.chatContainer), t.appendChild(n), this.chatContent.innerHTML += this.chatStripe(!0, this.welcomeMessage, "") } createStyles() { const t = document.createElement("style"); document.head.appendChild(t), t.innerHTML = `\n            .${nm}-clearfix::after {\n                content: "";\n                clear: both;\n                display: table;\n            }\n\n            .${nm}-icon {\n                cursor: pointer;\n                width: 100%;\n                position: absolute;\n                top: 11px;\n                left: 13px;\n                transition: transform .3s ease;    \n                color: white;\n            }\n            .${nm}-hidden {\n                transform: scale(0);\n            }\n            .${nm}-button-container {\n                background: linear-gradient(to bottom right, #4294e3, #8f12fd);\n                width: 70px;\n                height: 70px;\n                border-radius: 50%;\n            }\n\n            .${nm}-chat-container {\n                box-shadow: 0 0 18px 8px rgba(0,0,0, 0.1);\n                right: -25px;\n                bottom: 75px;\n                position: absolute;\n                transition: max-height .2s ease;\n                background-color: white;\n                border-radius: 10px;\n            }\n\n            .${nm}-chat-container.hidden {\n                max-height: 0px;\n            }\n\n            .${nm}-scrpt-header {\n                display: inline-block;\n                width: 100%;\n                margin: 0;\n                padding: 10px;\n                color: white;\n                background: linear-gradient(to bottom right, #4294e3, #8f12fd);\n                border-top-left-radius: 10px;\n                border-top-right-radius: 10px;\n            }\n\n            .${nm}-chat-container form input {\n                padding: 20px;\n                display: inline-block;\n                width: calc(100% - 50px);\n                border: 0px;\n                background-color: #f7f7f7;\n            }\n            .${nm}-chat-container form input:focus {\n                outline: none;\n            }\n\n            .${nm}-chat-container form button {\n                cursor: pointer;\n                color: #8f12fd;\n                background-color: #f7f7f7;\n                border: 0;\n                border-radius: 4px;\n                padding: 20px 10px;\n            }\n            .${nm}-scrpt-chat-bottom-menu {\n                padding-top: 20px;\n                list-style-type: none;\n                text-align: center;\n                padding-left: 0px;\n                margin-left: 0px;\n            }\n            .${nm}-scrpt-chat-bottom-menu li {\n                display: inline-block;\n                padding-left: 30px;\n                padding-right: 30px;\n                cursor: pointer;\n            }\n            .${nm}-bottom-menu-icon {\n                padding-bottom: 5px;\n                display: inline-block;\n            }\n            .${nm}-chat-content {\n                display: block;\n                width: 100%;\n                padding: 10px;\n                height: 510px;\n                overflow-y: scroll;\n                position: relative;\n                box-shadow: 0 4px 2px -2px rgba(0,0,0, 0.1);\n            }\n\n            .${nm}-close-button, .${nm}-fullscreen-button {\n                border: 0px;\n                background-color: white;\n                border-radius: 100%;\n                padding-bottom: 3px;\n                float: right;\n                margin-left: 4px;\n            }\n            .${nm}-msg-box {\n                display: inline-block;\n                width:80%;\n            }\n            .${nm}-msg-box p {\n                padding: 7px;\n            }\n            .${nm}-income {\n                float: left;\n            }\n            .${nm}-outcome {\n                float: right;\n            }\n            .${nm}-bubble-outcome {\n                background-color: gray;\n                color: white;\n                border-top-left-radius: 10px;\n                border-top-right-radius: 10px;\n                border-bottom-left-radius: 10px;\n            }\n            .${nm}-bubble-income {\n                background-color: #f7f7f7;\n                color: #424242;\n                border-top-left-radius: 10px;\n                border-top-right-radius: 10px;\n                border-bottom-right-radius: 10px;\n            }\n        ` } createChatContainerContent() { const t = document.createElement("span"); t.classList.add(`${nm}-clearfix`), this.chatContainer.innerHTML = ""; const n = document.createElement("div"); n.classList.add(`${nm}-scrpt-header`); const e = document.createElement("button"); e.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">\n        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>\n      </svg> ', e.classList.add(`${nm}-close-button`), e.addEventListener("click", (() => this.closeChat())), n.appendChild(e), this.fullScreenButton = document.createElement("button"), this.fullScreenButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrows-angle-expand" viewBox="0 0 16 16">\n        <path fill-rule="evenodd" d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707zm4.344-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707z"/>\n      </svg>', this.fullScreenButton.classList.add(`${nm}-fullscreen-button`), this.fullScreenButton.addEventListener("click", (() => this.fullscreenchat())), n.appendChild(this.fullScreenButton); const i = document.createElement("form"); i.classList.add(`${nm}-content`); const o = document.createElement("input"); o.requered = !0, o.id = `${nm}-text`, o.type = "text", o.placeholder = this.inputText, this.btn = document.createElement("button"), this.btn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="30" height="20" fill="currentColor" class="bi bi-send-fill" viewBox="0 0 16 16">\n        <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 3.178 4.995.002.002.26.41a.5.5 0 0 0 .886-.083l6-15Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z"/>\n      </svg>', this.chatContent = document.createElement("div"), this.chatContent.classList.add(`${nm}-chat-content`), i.appendChild(this.chatContent), i.appendChild(t), i.appendChild(o), i.appendChild(this.btn), i.addEventListener("submit", this.submit.bind(this)); const a = document.createElement("ul"); a.classList.add(`${nm}-scrpt-chat-bottom-menu`);[{ icon: '\n                <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-house" viewBox="0 0 16 16">\n                <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z"/>\n                </svg>', text: "Home", click: function () { alert(this.text) } }, { icon: '\n                <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-chat-dots" viewBox="0 0 16 16">\n                <path d="M5 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>\n                <path d="m2.165 15.803.02-.004c1.83-.363 2.948-.842 3.468-1.105A9.06 9.06 0 0 0 8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6a10.437 10.437 0 0 1-.524 2.318l-.003.011a10.722 10.722 0 0 1-.244.637c-.079.186.074.394.273.362a21.673 21.673 0 0 0 .693-.125zm.8-3.108a1 1 0 0 0-.287-.801C1.618 10.83 1 9.468 1 8c0-3.192 3.004-6 7-6s7 2.808 7 6c0 3.193-3.004 6-7 6a8.06 8.06 0 0 1-2.088-.272 1 1 0 0 0-.711.074c-.387.196-1.24.57-2.634.893a10.97 10.97 0 0 0 .398-2z"/>\n                </svg>', text: "Chat", click: function () { alert(this.text) } }, { icon: '\n                <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-question-circle" viewBox="0 0 16 16">\n                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>\n                <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"/>\n                </svg>', text: "Help", click: function () { alert(this.text) } }].forEach((t => { let n = document.createElement("li"), e = document.createElement("span"); e.classList.add(`${nm}-bottom-menu-icon`), e.innerHTML = t.icon, n.appendChild(e); let i = document.createElement("br"); n.appendChild(i); let o = document.createElement("span"); o.innerHTML = t.text, n.appendChild(o), a.appendChild(n) })), this.chatContainer.appendChild(n), this.chatContainer.appendChild(i), this.chatContainer.appendChild(t), this.chatContainer.appendChild(a) } async submit(t) { t.preventDefault(); let n = this.generateUniqueId(), e = document.getElementById(`${nm}-text`), i = e.value; if ("" === i.trim()) return; this.chatContent.innerHTML += this.chatStripe(!1, i, ""), e.disabled = !0, e.value = "", this.btn.disabled = !0; let o = await this.makeRequest("POST", `${domain}/answer?name=${this.appName}`, { question: i }); o = JSON.parse(o), this.chatContent.innerHTML += this.chatStripe(!0, " ", n); const a = document.getElementById(n); this.typeText(a, o.answer) } toggleOpen() { this.open = !this.open, this.open ? this.openChat() : this.closeChat() } fullscreenchat() { "400px" === this.chatContainer.style.width ? (this.chatContainer.style.width = window.innerWidth - 30 + "px", this.chatContainer.style.height = window.innerHeight - 125 + "px") : (this.chatContainer.style.width = this.detectMob() ? window.innerWidth - 17 + "px" : "400px", this.chatContainer.style.bottom = this.detectMob() ? "0px" : "75px", this.chatContainer.style.height = "auto") } closeChat() { this.open = !1, this.chatIcon.classList.remove(`${nm}-hidden`), this.closeIcon.classList.add(`${nm}-hidden`), this.chatContainer.classList.add(`${nm}-hidden`) } openChat() { this.chatIcon.classList.add(`${nm}-hidden`), this.closeIcon.classList.remove(`${nm}-hidden`), this.chatContainer.classList.remove(`${nm}-hidden`) } typeText(t, n) { let e = 0, i = setInterval((() => { if (e < n.length) t.innerHTML += n.charAt(e), e++, this.chatContent.scrollTop = this.chatContent.scrollHeight; else { clearInterval(i), document.getElementById(`${nm}-text`).disabled = !1, this.btn.disabled = !1 } }), 20) } uuidv4() { return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (t => (t ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> t / 4).toString(16))) } generateUniqueId() { return this.uuidv4() } chatStripe(t, n, e) { return `\n              <div class="${nm}-msg-box ${t ? `${nm}-income` : `${nm}-outcome`}">\n                <p id="${e}" class="${t ? `${nm}-bubble-income` : `${nm}-bubble-outcome`}">${n}</p>\n              </div>\n        ` } async getChatInitialData(t) { let n = await this.makeRequest("GET", `${domain}/api/project/${t}/init`), e = JSON.parse(n); this.welcomeMessage = e.data.welcome_message, this.inputText = e.data.input_text } makeRequest(t, n, e = {}) { return new Promise((function (i, o) { let a = new XMLHttpRequest; a.open(t, n), a.setRequestHeader("Content-type", "application/json"), a.onload = function () { this.status >= 200 && this.status < 300 ? i(a.response) : o({ status: this.status, statusText: a.statusText }) }, a.onerror = function () { o({ status: this.status, statusText: a.statusText }) }, 0 !== Object.keys(e).length ? a.send(JSON.stringify(e)) : a.send() })) } }